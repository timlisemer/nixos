#!/bin/bash
#######################################################
# Custom Edits
#######################################################

# User aliases
alias htop='btop'
alias gitree='git ls-files --cached --others --exclude-standard | tree --fromfile'
alias gittree='git ls-files --cached --others --exclude-standard | tree --fromfile'
alias term='ghostty'
alias terminal='ghostty'
alias nixos='cd ~/Coding/Other/nixos'
alias iocto='cd ~/Coding/iocto'
alias install_tim_server='nix run nixpkgs#nixos-anywhere -- --flake /etc/nixos#tim-server root@142.132.234.128'
alias install_homeassistant_yellow='nix run nixpkgs#nixos-anywhere -- --flake /etc/nixos#homeassistant-yellow nixos@homeassistant-yellow'
alias nix_clean='sudo nix-collect-garbage -d && sudo nix-store --gc && sudo nix-store --optimize && sudo nix-store --verify --check-contents'
alias git_amend='git amend'
alias wake_tim-pc='wol 40:B0:76:DC:79:AA'

if [[ -n "$HYPRLAND_INSTANCE_SIGNATURE" ]]; then
	alias logout='hyprctl dispatch exit'
else
	alias logout='loginctl terminate-user $USER'
fi

alias rebuild='
stop_all_docker_containers &&
	sudo find /etc/nixos -mindepth 1 -maxdepth 1 ! -name "flake.lock" -exec rm -rf {} + &&
	sudo cp -a ~/Coding/Other/nixos/. /etc/nixos/ &&
	([ -d /etc/nixos/.git ] && git -C /etc/nixos status --short || true) &&
	clear &&
	sudo nixos-rebuild switch --flake /etc/nixos#$(cat /etc/hostname) &&
	bash
'

# Function to clean trash for all users using trash-cli
clean_all_trash() {
	echo "Cleaning trash for all users..."

	# Loop through all user home directories
	for user_home in /home/*; do
		if [ -d "$user_home" ]; then
			username=$(basename "$user_home")
			echo "Cleaning trash for: $username"
			# Use sudo to run trash-empty as each user
			sudo -u "$username" trash-empty || true
		fi
	done

	# Also clean root's trash
	echo "Cleaning trash for: root"
	sudo trash-empty || true

	echo "Trash cleaning completed!"
}

#######################################################
# SOURCED ALIAS'S AND SCRIPTS BY zachbrowne.me
#######################################################
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Enable bash programmable completion features in interactive shells
if [ -f /usr/share/bash-completion/bash_completion ]; then
	. /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
	. /etc/bash_completion
fi

#######################################################
# EXPORTS
#######################################################

# Disable the bell
if [[ $iatest -gt 0 ]]; then bind "set bell-style visible"; fi

# Expand the history size
export HISTFILESIZE=10000
export HISTSIZE=500

# Don't put duplicate lines in the history and do not add lines that start with a space
export HISTCONTROL=erasedups:ignoredups:ignorespace

# Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
shopt -s checkwinsize

# Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
shopt -s histappend
PROMPT_COMMAND='history -a'

# Allow ctrl-S for history navigation (with ctrl-R)
[[ $- == *i* ]] && stty -ixon

# Ignore case on auto-completion
# Note: bind used instead of sticking these in .inputrc
if [[ $iatest -gt 0 ]]; then bind "set completion-ignore-case on"; fi

# Show auto-completion list automatically, without double tab
if [[ $iatest -gt 0 ]]; then bind "set show-all-if-ambiguous On"; fi

# Set the default editor
alias edit='nvim'
alias sedit='sudo nvim'
export EDITOR=nvim
export VISUAL=nvim
alias pico='edit'
alias spico='sedit'
alias nano='edit'
alias snano='sedit'
alias vim='nvim'

# To have colors for ls and all grep commands such as grep, egrep and zgrep
export CLICOLOR=1
export LS_COLORS='no=00:fi=00:di=00;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:*.xml=00;31:'
#export GREP_OPTIONS='--color=auto' #deprecated
alias grep="grep $GREP_OPTIONS"
unset GREP_OPTIONS

# Color for manpages in less makes manpages a little easier to read
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

#######################################################
# GENERAL ALIAS'S
#######################################################
# To temporarily bypass an alias, we precede the command with a \
# EG: the ls command is aliased, but to use the normal ls command you would type \ls

# alias to show the date
alias da='date "+%Y-%m-%d %A %T %Z"'

# Alias's to modified commands
alias cp='cp -i'
alias mv='mv -i'
alias rm='trash -v'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'
alias cls='clear'
alias apt-get='sudo apt-get'
alias vi='nvim'
alias svi='sudo vi'
alias vis='nvim "+set si"'

# Change directory aliases
alias home='cd ~'
alias .='ls -aF --color=auto'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Search command line history
alias h="history | grep "

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Search files in the current folder
alias f="find . | grep "

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

# To see if a command is aliased, a file, or a built-in command
alias checkcommand="type -t"

# Show open ports
alias openports='netstat -nape --inet'

# Alias's for safe and forced reboots
alias rebootsafe='sudo shutdown -r now'
alias rebootforce='sudo shutdown -r -n now'

# Alias's to show disk space and space used in a folder
alias diskspace="du -S | sort -n -r |more"
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'
alias mountedinfo='df -hT'

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Automatically do an ls after each cd, z, or zoxide
cd() {
	if [ -n "$1" ]; then
		builtin cd "$@" && ls
	else
		builtin cd ~ && ls
	fi
}

# Returns the last 2 fields of the working directory
pwdtail() {
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

# GitHub Additions
gacp() {
	git add .
	git commit -m "$1"
	git push
}

git_update_fork() {
	local branch="${1:-main}"
	local upstream_remote="upstream"
	local upstream_url="$2"

	# Check if working directory is clean
	if ! git diff-index --quiet HEAD --; then
		echo "Error: Working directory is not clean. Please commit or stash changes first."
		return 1
	fi

	# Check if upstream remote exists, add it if not
	if ! git remote | grep -q "^${upstream_remote}$"; then
		if [ -z "$upstream_url" ]; then
			echo "Upstream remote not found. Please provide the URL of the original (template/fork) repository:"
			read upstream_url
		fi
		git remote add "${upstream_remote}" "${upstream_url}"
	fi

	# Fetch and merge
	git fetch "${upstream_remote}"
	git checkout "${branch}"
	if git merge "${upstream_remote}/${branch}" --no-commit --no-ff; then
		# Merge succeeded without conflicts
		git commit --no-edit || true # Commit if there's something to commit
		git push origin "${branch}"
		echo "Sync completed successfully."
	else
		# Merge failed due to conflicts
		echo "Merge conflict detected. Conflicting files:"
		git ls-files -u | awk '{print $4}' | sort -u
		echo "You can:"
		echo "  1. Resolve conflicts manually, then run: git commit; git push origin ${branch}"
		echo "  2. Automatically resolve by keeping local changes (prefer ours, handle deletions)"
		echo "  3. Automatically resolve by keeping incoming changes (prefer theirs, handle deletions)"
		echo "  4. Abort the merge and reject incoming changes: git merge --abort"
		echo "Enter your choice (1-4):"
		read choice
		auto_resolve() {
			local strategy="$1" msg="$2"
			conflicting_files=$(git ls-files -u | awk '{print $4}' | sort -u)
			for file in $conflicting_files; do
				if git checkout --"$strategy" -- "$file" 2>/dev/null; then
					git add "$file"
				else
					git rm --quiet "$file"
				fi
			done
			if git commit --no-edit; then
				git push origin "${branch}"
				echo "$msg and pushed successfully."
			else
				echo "Auto-resolution failed; some issues remain. Resolve manually or abort."
				return 1
			fi
		}
		case "$choice" in
		1)
			echo "Proceeding with manual resolution. Resolve conflicts, then commit and push."
			;;
		2)
			auto_resolve ours "Auto-resolved by keeping local changes"
			;;
		3)
			auto_resolve theirs "Auto-resolved by keeping incoming changes"
			;;
		4)
			git merge --abort
			echo "Merge aborted."
			;;
		*)
			echo "Invalid choice. Merge remains in conflicted state."
			return 1
			;;
		esac
		return 0
	fi
}

function git() {
	# Custom 'git clone': always clone with submodules.
	if [ "$1" = "clone" ]; then
		shift
		command git clone --recurse-submodules --remote-submodules "$@"

	# Custom 'git pull': always pull with submodules and update them
	elif [ "$1" = "pull" ]; then
		command git pull --recurse-submodules && command git submodule update --remote --merge

	# Custom 'git amend': stage all, amend last commit, and force push
	elif [ "$1" = "amend" ]; then
		command git add . && git commit --amend --no-edit && git push --force-with-lease

	# Custom 'git update': sync fork with upstream (see git_update_fork)
	elif [ "$1" = "update" ]; then
		git_update_fork

	# Custom 'git clean': dry-run clean untracked files and dirs
	elif [ "$1" = "clean" ]; then
		command git clean -fdn

	# Custom 'git branch -l' or '--list': show all branches (local and remote)
	elif [ "$1" = "branch" ] && [ "$2" = "-l" -o "$2" = "--list" ]; then
		command git branch -a

	# Custom 'git branch -r <branch>' or '--remove <branch>': delete local branch, and remote branch if it exists
	elif [ "$1" = "branch" ] && [ "$2" = "-r" -o "$2" = "--remove" ] && [ -n "$3" ]; then
		branch_name="$3"
		command git branch -d "$branch_name"
		# Check if remote branch exists before trying to delete
		if git ls-remote --exit-code --heads origin "$branch_name" >/dev/null 2>&1; then
			command git push origin --delete "$branch_name"
		else
			echo "Remote branch '$branch_name' does not exist, skipping remote delete."
		fi

	# Custom 'git squash <X>': squash last X commits into one
	elif [ "$1" = "squash" ]; then
		if [ -z "$2" ]; then
			echo "Usage: git squash <number>"
			echo ""
			echo "Squashes the last <number> commits into a single commit."
			echo "The number represents how many commits to include (counting starts at 1)."
			echo ""
			echo "Examples:"
			echo "  git squash 2    # Squashes the last 2 commits"
			echo "  git squash 5    # Squashes the last 5 commits"
			return 1
		fi
		
		local num_commits="$2"
		if ! [[ "$num_commits" =~ ^[0-9]+$ ]] || [ "$num_commits" -lt 2 ]; then
			echo "Error: Please provide a number >= 2 (need at least 2 commits to squash)"
			return 1
		fi

		if ! command git diff-index --quiet HEAD --; then
			echo "Error: Uncommitted changes detected. Please commit or stash changes first."
			return 1
		fi

		echo "Squashing last $num_commits commits into one..."

		# Reset to target commit and merge --squash to get exact message generation
		command git reset --hard HEAD~"$num_commits" &&
			command git merge --squash HEAD@{1} &&
			command git commit
		echo "Successfully squashed $num_commits commits."

	# Custom 'git branch <name>': only if exactly two arguments (create, switch, set upstream, and push new branch)
	elif [ "$1" = "branch" ] && [ $# -eq 2 ] && [[ "$2" != -* ]]; then
		branch_name="$2"
		command git checkout -b "$branch_name" &&
			command git branch --set-upstream-to=origin/HEAD "$branch_name" &&
			command git push -u origin "$branch_name"

	# Fallback: pass all other git commands through
	else
		command git "$@"
	fi
}

# --- nixos_generate_image: generate iso, qcow, or sd-aarch64 image for NixOS ---
alias iso_image_create='nixos_generate_image'
alias img_image_create='nixos_generate_image'
alias qcow_image_create='nixos_generate_image'
nixos_generate_image() {
	local HOST="$1"
	local FORMAT="$2"

	if [ -z "$HOST" ]; then
		echo "Error: Missing host parameter"
		echo "Usage: nixos_generate_image <host> <format>"
		echo "Available formats: iso, qcow, sd-aarch64"
		return 1
	fi

	if [ -z "$FORMAT" ]; then
		echo "Error: Missing format parameter"
		echo "Usage: nixos_generate_image <host> <format>"
		echo "Available formats: iso, qcow, sd-aarch64"
		return 1
	fi

	case "$FORMAT" in
	iso | qcow | sd-aarch64) ;;
	*)
		echo "Error: Invalid format '$FORMAT'"
		echo "Available formats: iso, qcow, sd-aarch64"
		return 1
		;;
	esac

	# Ask if user wants to clean Nix garbage to avoid hash mismatch errors
	echo -n "Clean Nix garbage before generating image? This can fix hash mismatch errors. (y/n): "
	read -r CLEAN_GARBAGE
	if [ "$CLEAN_GARBAGE" = "y" ] || [ "$CLEAN_GARBAGE" = "Y" ]; then
		echo "Cleaning Nix garbage..."
		sudo nix-collect-garbage -d && nix-collect-garbage -d
		echo "Garbage collection completed."

		# Also verify and repair the store
		echo "Verifying and repairing Nix store..."
		sudo nix-store --verify --check-contents --repair
		echo "Store verification completed."
	fi

	local OUT="nixos_${FORMAT}_image_${HOST}_$(date +%Y%m%d_%H%M%S)"
	local TMPDIR="/tmp/$OUT"
	local DESTDIR=~/Coding/Other/nixos-images/
	local SUDO_CMD=""

	mkdir -p "$DESTDIR"

	if [ "$FORMAT" = "sd-aarch64" ]; then
		SUDO_CMD="sudo"
	fi

	# Check for GitHub token to avoid rate limits
	if [ -z "$GITHUB_TOKEN" ]; then
		echo "Warning: GITHUB_TOKEN not set. You may hit GitHub API rate limits."
		echo "To fix: export GITHUB_TOKEN=your_github_personal_access_token"
	fi

	if $SUDO_CMD nix run --impure github:nix-community/nixos-generators -- \
		--format "$FORMAT" \
		--flake /etc/nixos#"${HOST}" \
		-o "$TMPDIR"; then

		case "$FORMAT" in
		iso)
			cp "$TMPDIR"/iso/*.iso "$DESTDIR/$OUT.iso"
			chmod 644 "$DESTDIR/$OUT.iso"
			chown $USER:$USER "$DESTDIR/$OUT.iso"
			;;
		qcow)
			cp "$TMPDIR"/nixos.qcow2 "$DESTDIR/$OUT.qcow2"
			chmod 644 "$DESTDIR/$OUT.qcow2"
			chown $USER:$USER "$DESTDIR/$OUT.qcow2"
			;;
		sd-aarch64)
			zstd --decompress "$TMPDIR"/sd-image/*.zst -o "$DESTDIR/$OUT.img"
			chmod 644 "$DESTDIR/$OUT.img"
			sudo chown $USER:$USER "$DESTDIR/$OUT.img"
			;;
		esac

		echo "$FORMAT image successfully stored at: $DESTDIR"
		find "$DESTDIR" -name "*${OUT}*" -type f -print
	else
		echo "Failed to generate $FORMAT image for host: $HOST"
		return 1
	fi
}
# -----------------------------------------------------------------------

# --- print_drives: print all block devices, rclone mounts, and network drives ---
alias drives_print='print_drives'
print_drives() {
	echo "--- Block Devices (NVMe, HDD, SSD, USB, SD Cards) ---"
	lsblk -o NAME,SIZE,TYPE,MODEL,TRAN,VENDOR | grep -v "TYPE"
	echo ""
	echo "--- QEMU/KVM Virtual Disks ---"
	ls -l /dev/disk/by-id/virtio-* 2>/dev/null || echo "No QEMU/KVM disks found."
	echo ""
	echo "--- rclone Mounts (FUSE) ---"
	df -hT | grep 'fuse.rclone' || echo "No rclone mounts found."
	echo ""
	echo "--- Network Drives (NFS, CIFS) ---"
	df -hT | grep -E 'nfs|cifs' || echo "No NFS or CIFS network drives found."
	echo ""
	echo "--------------------------------------------------------"
}
# -----------------------------------------------------------------------

# --- stop_all_docker_containers: stop all docker container services ---
alias docker_stop_all='stop_all_docker_containers'
stop_all_docker_containers() {
	# Collect unit names that match docker-*.service but are NOT docker.service itself
	mapfile -t _containers < <(
		systemctl list-units --no-legend --type=service 'docker-*' |
			awk '{print $1}' |
			grep -E '^docker-[^.]+\.service$'
	)

	if ((${#_containers[@]} == 0)); then
		echo "No docker container services found."
		return 0
	fi

	echo "Stopping: ${_containers[*]}"
	sudo systemctl stop "${_containers[@]}"
	list_all_docker_containers
}
# -----------------------------------------------------------------------

# --- list_all_docker_containers: list all docker container services ---
alias docker_list_all='list_all_docker_containers'
list_all_docker_containers() {
	printf "%-25s %-20s %-10s\n" "CONTAINER (service)" "CONTAINER ID" "STATE"
	while read -r unit _; do
		[[ $unit =~ \.service$ ]] || continue     # keep only *.service lines
		[[ $unit == docker.service ]] && continue # skip the main docker.service
		status=$(systemctl is-active "$unit")
		name=${unit#docker-}
		name=${name%.service}
		cid=$(docker ps -a --filter "name=^/${name}$" --format '{{.ID}}')
		printf "%-25s %-20s %-10s\n" "$name" "${cid:-<none>}" "$status"
	done < <(systemctl list-units --all --no-legend --type=service 'docker-*')
}
# -----------------------------------------------------------------------

# --- explorer: open Windows File Explorer from inside WSL -------------------
explorer() {

	if [ "${WSL:-0}" = "0" ]; then
		echo "This function is only available from within a WSL environment" >&2
		return 1
	fi

	local win_explorer="/mnt/c/Windows/explorer.exe"
	if [[ ! -x "$win_explorer" ]]; then
		echo "explorer: Windows Explorer not found at $win_explorer" >&2
		return 1
	fi

	local distro="${WSL_DISTRO_NAME:-$(wslvar WSL_DISTRO_NAME | tr -d '\r')}"

	# If no argument is provided, use $HOME (user's home directory)
	if [[ $# -eq 0 ]]; then
		set -- "$HOME"
	fi

	local args=() abs win_path

	for p in "$@"; do
		abs="$(realpath "$p")"

		if [[ ! -e "$abs" ]]; then
			echo "explorer: $p – no such file or directory" >&2
			continue
		fi

		if [[ "$abs" == /mnt/?/* ]]; then
			local drive="${abs:5:1}"
			win_path="${drive^^}:${abs:6}"
			win_path="${win_path//\//\\}"
		else
			local sub="${abs#/}"
			sub="${sub//\//\\}"
			win_path="\\\\wsl.localhost\\${distro}\\${sub}"
		fi

		if [[ -f "$abs" ]]; then
			args+=("/select,${win_path}")
		else
			args+=("${win_path}")
		fi
	done

	(
		nohup "$win_explorer" "${args[@]}" >/dev/null 2>&1 &
		disown
	) >/dev/null 2>&1
	return 0
}
# ---------------------------------------------------------------------------

# --- ssh: custom SSH command to map hostnames to IP addresses -------------
ssh() {
	# capture the first argument (the "host" the user typed)
	local target="$1"
	shift

	# prevent running with no target argument
	if [[ -z "$target" ]]; then
		echo "Usage: ssh <host> [args...]" >&2
		return 1
	fi

	# special handling for tim-pc: use connect_tim_pc helper with Wake-on-LAN
	if [[ "$target" == "tim-pc" || "$target" == "pc" || "$target" == "$USER@tim-pc" || "$target" == "$USER@pc" ]]; then
		connect_tim_pc "$@"
		return
	fi

	# only rewrite if the user did not already include a username
	if [[ "$target" != *@* ]]; then
		target="$USER@$target"
	fi

	command ssh "$target" "$@"
}
# ---------------------------------------------------------------------------

# --- rebuild_remote: rebuild NixOS configuration on a remote host ---------
rebuild_remote() {
	local host="$1"

	# --- sanity checks -------------------------------------------------------
	if [[ -z "$host" ]] || [[ "$host" =~ [[:space:]] ]]; then
		echo "Usage: rebuild_remote <host>   (single, non-empty hostname)" >&2
		return 1
	fi
	# ------------------------------------------------------------------------

	nixos-rebuild switch \
		--flake "/home/$USER/Coding/Other/nixos#$host" \
		--target-host "$USER@$host" \
		--build-host localhost \
		--use-remote-sudo \
		--keep-going
}
alias remote_rebuild='rebuild_remote'
# ---------------------------------------------------------------------------

# --- ssh helper: wake tim-pc via WoL and SSH in when reachable ---------------
connect_tim_pc() {
	local max_attempts=5  # total Wake-on-LAN attempts
	local ping_timeout=30 # seconds to wait after each WoL
	local attempt=1

	echo "Trying to reach tim-pc (10.0.0.3)..."
	if ping -c 1 -W 1 10.0.0.3 >/dev/null 2>&1; then
		echo "tim-pc is already online."
		command ssh $USER@10.0.0.3 "$@"
		return
	fi

	while ((attempt <= max_attempts)); do
		echo "Wake attempt #$attempt - sending magic packet."
		wake_tim-pc

		echo "Waiting up to ${ping_timeout}s for tim-pc to respond..."
		for ((elapsed = 0; elapsed < ping_timeout; elapsed++)); do
			if ping -c 1 -W 1 10.0.0.3 >/dev/null 2>&1; then
				echo "tim-pc is now online after ${elapsed}s."
				command ssh $USER@10.0.0.3 "$@"
				return
			fi
			sleep 1
		done

		echo "No response from tim-pc yet."
		((attempt++))
	done

	echo "Failed to reach tim-pc after ${max_attempts} wake attempts."
	return 1
}
# ---------------------------------------------------------------------------

# --- transfer: enhanced scp with hostname mapping -------------------------
transfer() {
	# usage: transfer <host> <local_path> <remote_path>
	local target="$1" src="$2" dst="$3"
	if [[ -z "$target" || -z "$src" || -z "$dst" ]]; then
		echo "Usage: transfer <host> <local_path> <remote_path>"
		return 1
	fi

	# map the user-friendly host keyword to its real user@host string
	local remote
	case "$target" in
	tim-server | server) remote="$USER@142.132.234.128" ;;
	tim-pc | pc) remote="$USER@10.0.0.3" ;;
	tim-laptop | laptop) remote="$USER@10.0.0.25" ;;
	homeassistant) remote="$USER@10.0.0.2" ;;
	rpi4) remote="$USER@10.0.0.87" ;;
	*) remote="$target" ;; # already user@host or raw host
	esac

	echo "Transferring \"$src\" → \"$remote:$dst\" ..."
	if scp -r "$src" "$remote:$dst"; then
		echo "Transfer complete."
	else
		echo "Transfer failed." >&2
		return 1
	fi
}
# --------------------------------------------------------------------------

#######################################################
# Set the ultimate amazing command prompt
#######################################################

export PATH=$PATH:"$HOME/.local/bin:$HOME/.cargo/bin:/var/lib/flatpak/exports/bin:/.local/share/flatpak/exports/bin"

if [[ $TERM != dumb ]]; then
	eval "$(starship init bash)"
fi
eval "$(zoxide init bash)"

[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh
[[ ! -d ~/.local/share/blesh || -z "$(ls -A ~/.local/share/blesh 2>/dev/null)" ]] && { mkdir -p ~/.local/share/blesh && cp -a $BLESH_PATH/* ~/.local/share/blesh; }
source ~/.local/share/blesh/ble.sh
eval "$(atuin init bash)"

# Terminal stuff

if [[ "$TERM" == "xterm-ghostty" ]]; then
	export TERM=xterm-256color
fi
